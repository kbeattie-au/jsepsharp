@page "/"

<PageTitle>JsepSharp Parser Demo</PageTitle>

<h1>JsepSharp</h1>
<div class="content px-4">
    <h2>About</h2>
    <div class="row">
        <div class="col-lg-6 col-md-12 col-sm-12">
            <p>
                JsepSharp is a JavaScript expression parser written in C# and a conversion of the
                <a href="https://ericsmekens.github.io/jsep/">jsep</a> project.
                It is able to parse expressions like <tt>x * (1 + 2)</tt> or <tt>foo(bar.baz[0])</tt>
                and convert them into an
                <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree (AST)</a>.
            </p>
            <p>
                It does not parse <tt>function</tt>, <tt>class</tt>, <tt>if</tt>, <tt>while</tt> or
                other operations, and does not support features like assignment without a plugin. It is more a
                tool to parse the kind of expressions that would be written in a spreadsheet cell, or used with
                field bindings in a reporting solution.
            </p>
            <p>
                The parser is designed with extensibility in mind, so developers can
                add support for their own operators and syntax tree nodes. Several features,
                like ternary support (<tt>?:</tt>), are implemented as
                <a href="https://github.com/kbeattie-au/jsepsharp/blob/main/README.md#plugins">optional plugins</a>.
            </p>
        </div>
        <div class="col-lg-6 col-md-12 col-sm-12">
            <h3>License and Source Code</h3>
            <p>
                The source code is <a href="https://github.com/kbeattie-au/jsepsharp">hosted on GitHub</a> and available under the
                <a href="https://github.com/kbeattie-au/jsepsharp/blob/main/LICENSE">MIT License</a>.
            </p>

            <h3>Usage and Examples</h3>
            <p>
                See the <a href="https://github.com/kbeattie-au/jsepsharp/blob/main/README.md">project readme</a>
                for examples on how to use and customize the parser.
            </p>

            <h3>Package / Download</h3>
            <p>
                No NuGet package or pre-compiled binaries exist yet. Both are planned.
            </p>
        </div>
    </div>

    <h2>Demo</h2>
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-12">
            <h3>Plugins</h3>

            Enabled Plugin Types (Loaded in Order Listed):
            <div class="card p-1">
                @foreach (var pl in pluginList)
                {
                    var itemName = pl.Name;
                    var itemId = $"Plugin{itemName}";
                    <div>
                        <InputCheckbox id="@itemId" @bind-Value="pl.IsSelected"></InputCheckbox>
                        <label for="@itemId">@itemName</label>
                    </div>
                }
            </div>

            <div style="padding: 0.75rem 0 1rem 0">
                <button class="btn btn-sm btn-light" type="button" @onclick="SelectAllPlugins">All</button>
                <button class="btn btn-sm btn-light" type="button" @onclick="SelectNoPlugins">None</button>
            </div>
        </div>
        <div class="col-lg-4 col-md-6 col-sm-12">
            <h3>Input</h3>

            <div class="form-group">
                <label for="codeInput">Enter an Expression:</label>
                <InputTextArea id="codeInput" @ref="codeEditor" @bind-Value="code" placeholder="e.g. x + 2" class="form-control" />
            </div>

            <div style="padding: 0.75rem 0 1rem 0">
                <button class="btn btn-primary" type="button" @onclick="ParseCode">Parse</button>
            </div>
        </div>
        <div class="col-lg-4 col-md-12 col-sm-12">
            <h3>Output</h3>

            <div class="form-group">
                <label for="outputFormat">Format:</label>
                <InputSelect class="form-control"
                             id="outputFormat"
                             Value="@format"
                             ValueExpression="@(() => format)"
                             ValueChanged="@((string v) => { format = v; BuildOutput(); })">
                    <option value="J">JSON</option>
                    <option value="C">Unit Tests</option>
                    <option value="S">S-expression</option>
                </InputSelect>
            </div>

            <div class="form-group mt-1">
                <InputCheckbox id="outputIndent"
                               Value="@autoIndent"
                               ValueExpression="@(() => autoIndent)"
                               ValueChanged="@((bool v) => { autoIndent = v; BuildOutput(); })" />
                <label for="outputIndent">Auto Indention</label>
            </div>

            <div class="card p-1 mt-1">
                <div class="@(parserError ? "card-body invalid" : "card-body")">
                    <code class="@(parserError ? "text-danger" : "")" style="font-size: 90%; white-space: pre-wrap">@outputText</code>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    class SelectablePlugin
    {
        public Type PluginType { get; set; }

        public string Name { get; set; }

        public bool IsSelected { get; set; }

        public SelectablePlugin() : this(typeof(Plugin)) { }

        public SelectablePlugin(Type typ) : this(typ, true) { }

        public SelectablePlugin(Type typ, bool isSelected)
        {
            PluginType = typ;
            Name = typ.Name;
            IsSelected = isSelected;
        }
    }

    const string DEFAULT_OUTPUT_MESSAGE = "Enter an expression to see the parsed result.";

    [AllowNull]
    InputTextArea codeEditor;

    [Inject]
    IJSRuntime JSRuntime { get; set; } = null!;

    SyntaxTree.SyntaxNode? ast = null;
    string format = "J";
    string code = "";
    string outputText = DEFAULT_OUTPUT_MESSAGE;
    bool autoIndent = true;
    bool parserError = false;
    List<SelectablePlugin> pluginList = BuiltIns.All.Select(k => new SelectablePlugin(k)).ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && JSRuntime is not null)
        {
            var assemblyName = Assembly.GetExecutingAssembly().GetName();
            await JSRuntime.InvokeVoidAsync("setVersion", assemblyName.Version?.ToString() ?? "");
        }
    }

    void ChangeAllPluginSelection(bool isSelected)
    {
        foreach (var pl in pluginList)
        {
            pl.IsSelected = isSelected;
        }
    }

    void SelectAllPlugins()
    {
        ChangeAllPluginSelection(true);
    }

    void SelectNoPlugins()
    {
        ChangeAllPluginSelection(false);
    }

    void BuildOutput()
    {
        if (parserError) return;

        try
        {
            if (ast is null)
            {
                outputText = DEFAULT_OUTPUT_MESSAGE;
                return;
            }

            if (format == "S" || format == "C")
            {
                var nsb = new NodeStringBuilder();
                nsb.UseSExpressions = (format == "S");
                nsb.UseAutoIndent = autoIndent;
                nsb.Node(ast);
                outputText = nsb.ToString();
            }
            else
            {
                var resolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver();
                var settings = new JsonSerializerSettings() { ContractResolver = resolver };
                var fmt = autoIndent ? Formatting.Indented : Formatting.None;
                outputText = JsonConvert.SerializeObject(ast, fmt, settings);
            }
        }
        catch (Exception ex)
        {
            outputText = $"Output Error. {ex.GetType().Name} Thrown: {ex.Message}";
        }
    }

    void ParseCode()
    {
        try
        {
            var pluginsSelected = pluginList.Where(pl => pl.IsSelected).Select(pl => pl.PluginType);

            ast = Jsep.Parse(code, pluginsSelected);
            parserError = false;

            BuildOutput();
        }
        catch (ParsingException ex)
        {
            parserError = true;
            outputText = ex.Message;
        }
        catch (Exception ex)
        {
            parserError = true;
            outputText = $"Parsing Error. {ex.GetType().Name} Thrown: {ex.Message}";
        }
    }
}